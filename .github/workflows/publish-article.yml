name: Publish Article

on:
  workflow_dispatch:
    inputs:
      article_data:
        description: 'Article data as JSON'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse article data
        id: parse
        run: |
          ARTICLE_DATA='${{ github.event.inputs.article_data }}'
          echo "article_data=$ARTICLE_DATA" >> $GITHUB_OUTPUT
          
          # Extract fields using jq
          TITLE=$(echo "$ARTICLE_DATA" | jq -r '.title')
          ID=$(echo "$ARTICLE_DATA" | jq -r '.id')
          echo "article_title=$TITLE" >> $GITHUB_OUTPUT
          echo "article_id=$ID" >> $GITHUB_OUTPUT

      - name: Update posts database
        run: |
          ARTICLE_DATA='${{ steps.parse.outputs.article_data }}'
          
          # Read existing posts
          if [ -f "client/public/posts-db.json" ]; then
            EXISTING=$(cat client/public/posts-db.json)
          else
            EXISTING='{"posts":[]}'
          fi
          
          # Add new article to the beginning of posts array
          UPDATED=$(echo "$EXISTING" | jq --argjson article "$ARTICLE_DATA" '.posts |= [$article] + .')
          
          # Write back to file
          echo "$UPDATED" > client/public/posts-db.json
          
          # Pretty print for readability
          jq '.' client/public/posts-db.json > client/public/posts-db.json.tmp
          mv client/public/posts-db.json.tmp client/public/posts-db.json

      - name: Commit and push
        run: |
          git config user.name "Travel Magazine Bot"
          git config user.email "bot@travel-magazine.local"
          
          ARTICLE_TITLE='${{ steps.parse.outputs.article_title }}'
          
          git add client/public/posts-db.json
          git commit -m "feat: publish article - $ARTICLE_TITLE" || echo "No changes to commit"
          git push origin main || echo "Push failed, might be no changes"

      - name: Trigger deployment
        run: |
          echo "Article published successfully!"
          echo "The article will be deployed to GitHub Pages automatically."

